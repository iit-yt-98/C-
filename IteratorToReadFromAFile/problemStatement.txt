A file contains a sequence of integers, stored one per line. Implement a class that facilitates iteration over these integers.


A valid integer is a sequence of one or more digits (without leading zeros), optionally preceded by a plus or minus sign, representing a number within the range [−1,000,000,000 :: 1,000,000,000].
We allow spaces to appear in a line before and/or after a valid integer.
Lines are separated with the line-fee character (ASCII code 10).
There might be lines that do not represent valid integers, e.g. 2u1, 23.9, #12 00,++1,2000000000. Such lines are considered to be comments, and should be discarded.


You should implement the following interface:


class Solution {

public:
	Solution(istream &inp)
	
	class iterator;
	
	iterator begin();
	
	iterator end();
	
}

/*
* Sample usage code
* int main() {
* Solution solution = Solution(inpStream);
* for(Solution::iterator it = solution.begin(); it != solution.end(); ++it) {
* int x = *it;
* cout << x << endl;
* }
* /
Example usage:


For an input file containing the following lines:
137
-104
2 58
+0
++3
+1
23.9
2000000000
-0
five
-1


your iterator should return the following sequence of integers:
[137,−104,0,1,0,−1]


Assume that:


the file can contain only line-feed characters (ASCII code 10) and printable ASCII characters (ASCII codes from 32 to 126);
for every file your iterator will be used only once.